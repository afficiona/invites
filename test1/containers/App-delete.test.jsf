import React from 'react';
import {
  renderIntoDocument,
  scryRenderedDOMComponentsWithClass,
  scryRenderedComponentsWithType
} from 'react-dom/test-utils';
import { expect } from 'chai';
import { fromJS } from 'immutable';
import { Provider } from 'react-redux';
import AppContainer from '../../src/containers/App';

function createMockStore(state) {
  return {
    subscribe: () => {},
    dispatch: () => {},
    getState: () => state
  };
}

describe('Component: App container', () => {
  let customersWhileFetching;
  let customersWhenSuccessfullyFetched;
  let customersOnFetchingError;
  let customersNotFound;
  let actions;
  let store;
  let CustomersFetched;
  let Customers;

  beforeEach(() => {

    Currencies = fromJS({
      list: [
        {
          id: 'GBP',
          name: 'GBP',
          balance: '43.86',
          isSource: true
        },
        {
          id: 'EUR',
          name: 'EUR',
          balance: '4.12',
          isTarget: true
        },
      ]
    });

    customersWhileFetching = {
      data: null,
      error: null,
      IsLoading: 123
    };

    customersWhenSuccessfullyFetched = fromJS({
      data: [{
        user_id: 1,
        name: 'Aman Pandey',
        latitude: '53.55',
        longitude: '-100.34'
      }],
      isFetching: false,
      error: null
    });

    customersOnFetchingError = fromJS({
      data: null,
      isFetching: false,
      error: 'Something went wrong!'
    });

    customersNotFound = fromJS({
      data: [],
      isFetching: false,
      error: null
    });

    actions = {
      fetchCustomers: () => true
    };

    store = createMockStore({
      Customers
    });

  });

  it('Has all the sub modules loaded', () => {
    const appComponent = renderIntoDocument(
      <Provider store={store}>
        <AppContainer
          Customers={Customers}
          actions={actions}
        />
      </Provider>
    );

    // Checking if all the submodules are loaded in the DOM
    const appContainer = scryRenderedDOMComponentsWithClass(
      appComponent,
      'app__container'
    );
    const shellContainer = scryRenderedDOMComponentsWithClass(
      appComponent,
      'shell__content'
    );
    expect(appContainer).to.have.lengthOf(1);
    expect(shellContainer).to.have.lengthOf(1);
  });

  it('Shows loading screen when customers are being fetched', () => {
    const app = renderIntoDocument(
      <Provider store={store}>
        <AppContainer />
      </Provider>
    );

    let list = scryRenderedComponentsWithType(app, List);
    let loader = scryRenderedComponentsWithType(app, Loader);
    let errorMessageBox = scryRenderedComponentsWithType(app, MessageBox);

    expect(loader).to.have.lengthOf(1);
    expect(list).to.have.lengthOf(0);
    expect(errorMessageBox).to.have.lengthOf(0);
  });

  it('Shows Error message when customers fetch has failed', () => {
    store = createMockStore({
      Customers: customersOnFetchingError
    });
    const app = renderIntoDocument(
      <Provider store={store}>
        <AppContainer />
      </Provider>
    );

    let list = scryRenderedComponentsWithType(app, List);
    let loader = scryRenderedComponentsWithType(app, Loader);
    let errorMessageBox = scryRenderedComponentsWithType(app, MessageBox);

    expect(loader).to.have.lengthOf(0);
    expect(list).to.have.lengthOf(0);
    expect(errorMessageBox).to.have.lengthOf(1);
  });

  it('Shows customers List when customers fetch is successful', () => {
    store = createMockStore({
      Customers: customersWhenSuccessfullyFetched
    });
    const app = renderIntoDocument(
      <Provider store={store}>
        <AppContainer />
      </Provider>
    );

    let list = scryRenderedComponentsWithType(app, List);
    let loader = scryRenderedComponentsWithType(app, Loader);
    let errorMessageBox = scryRenderedComponentsWithType(app, MessageBox);

    expect(loader).to.have.lengthOf(0);
    expect(list).to.have.lengthOf(1);
    expect(errorMessageBox).to.have.lengthOf(0);
  });

});
